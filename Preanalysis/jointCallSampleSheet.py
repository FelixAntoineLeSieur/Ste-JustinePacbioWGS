import sys,os
import json
import subprocess
import argparse
from Sample import Sample
from pathlib import Path
from configurator import Config
import pandas as pd
import numpy as np
from Family import Family

"""
Generate the WDL samplesheet for given family (duo, trio...).
Give the sample info (obtained from the sampleList generated by getSamples.py) as argument and a config file, optionally
"""

def retrieve_samples(full_list,sample_ID):
	#Given the list of samples and the ID of a sample, retrieve all sample info from sample list
	#Return a Sample Object
	sample_row = full_list[full_list["Name"]==sample_ID]
	if sample_row.shape[0] == 0:
		print(f"Sample {sample_ID} was not found in sample list: {full_list}")
		sys.exit()
	elif sample_row.shape[0] > 1:
		print(f"More than one match detected in list for sample {sample_ID}")
		sys.exit()
	sample_format = Sample(
	sample_row["run_id"].values[0],
	sample_row["Well"].values[0],
	name=sample_row["Name"].values[0],
	bam_path=sample_row["BAM"].values[0],
	status={
		"Status":sample_row["Status"].values[0], 
		"Role":sample_row["Role"].values[0], 
		"Gender":sample_row["Gender"].values[0], 
		"Affected": sample_row["Affected"].values[0]
		},
	HPOs=sample_row["HPO"].values[0])
	return sample_format

if __name__ == "__main__":
	parser = argparse.ArgumentParser(
		prog = 'jointCallSampleSheet.py',
		usage = "python3 %(prog)s [-n family_id -p proband_id -m mother_id -f father_id -l list] [--config config_file (optional)]",	
		description='given a family_id, retrieve the samples included within. Prints them to family_id_sample for future use')
	parser.add_argument('-p', '--proband',help='proband sample name',required=True)
	parser.add_argument('-n', '--name',help='Name given to trio (usually pXXX)',required=True) 

	parser.add_argument('-m', '--mother', nargs='?',help='mother sample name') 
	parser.add_argument('-f', '--father', nargs='?',help='father sample name') 

	parser.add_argument('-l', '--list', nargs='?', const='mySampleList.txt', default='mySampleList.txt')
	parser.add_argument('-c', '--config', nargs='?', const='.myconf.json', default='.myconf.json')
	
	args		= parser.parse_args()
	configs  	= Config.from_path(args.config)
	sample_sheet_path = configs.Paths.sample_sheet_path
	family_ids = [args.proband]
	#Check member args
	print(f"Parents: mother:{args.mother}, father:{args.father}")
	if args.mother is None and args.father is None:
		print("At least one parent required for joint call")
	
	if args.mother is not None:
		family_ids.append(args.mother)
	if args.father is not None:
		family_ids.append(args.father)
	
	#Find the samples from the list
	sample_list = pd.read_csv(args.list,sep=";",names=["Name","Well","Barcode","run_id","Gender","Status","Role","HPO","BAM","Affected"])
	sample_list = sample_list.replace({np.nan: ""})
	family={}
	for sample_id in family_ids:
		sampled_format = retrieve_samples(sample_list,sample_id)
		role=sampled_format.case_status["Role"].split(" ")[0]
		family.update({role:sampled_format})

	print(family)
	full_family = Family(args.name,family)
	print(full_family)
	full_family.write_joint_samplesheet()

	with open(f"{sample_sheet_path}/{args.name}.txt",'w') as fw:
		fw.write(f"{args.name},{args.name}.json\n")
		for role in family:
			item = family[role]
			fw.write(f"{role}:{item.name},{item.bam_path}\n")

